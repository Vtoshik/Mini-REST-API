"""add indexes to username and email for User and change length of email to 2 255. Also update Note by adding unique constraint so note title will be unique only for certain user not for all

Revision ID: 9471643256aa
Revises: f6e57cf7d800
Create Date: 2025-09-20 12:10:36.789712

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9471643256aa'
down_revision = 'f6e57cf7d800'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('notes_title_key'), type_='unique')
        batch_op.create_unique_constraint('unique_user_title', ['user_id', 'title'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.drop_constraint(batch_op.f('users_email_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('users_username_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.create_unique_constraint(batch_op.f('users_username_key'), ['username'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('users_email_key'), ['email'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=False)

    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.drop_constraint('unique_user_title', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('notes_title_key'), ['title'], postgresql_nulls_not_distinct=False)

    # ### end Alembic commands ###
